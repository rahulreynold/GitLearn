git config --global user.name "Rahul"

Hereâ€™s a list of essential Git commands with explanations to help you get started:

---

## **Basic Git Commands**

### **Setup**
- **`git config --global user.name "Your Name"`**  
  Sets your Git username (global setting for all repositories).

- **`git config --global user.email "your-email@example.com"`**  
  Sets your Git email.

- **`git config --list`**  
  Displays the current configuration.

---

### **Creating or Cloning Repositories**
- **`git init`**  
  Initializes a new Git repository in the current folder.

- **`git clone <repository-url>`**  
  Clones a remote repository to your local machine.

---

### **Staging and Committing Changes**
- **`git status`**  
  Shows the status of changes (tracked, untracked, and staged files).

- **`git add <file>`**  
  Adds a specific file to the staging area.

- **`git add .`**  
  Adds all changes (new, modified, or deleted) to the staging area.

- **`git commit -m "commit message"`**  
  Commits the staged changes with a message.

- **`git commit -am "commit message"`**  
  Adds and commits **only tracked files** (skips untracked ones).

---

### **Branching and Merging**
- **`git branch`**  
  Lists all branches in the repository.

- **`git branch <branch-name>`**  
  Creates a new branch.

- **`git checkout <branch-name>`**  
  Switches to the specified branch.

- **`git switch <branch-name>`**  
  Another way to switch branches.

- **`git merge <branch-name>`**  
  Merges the specified branch into the current branch.

- **`git branch -d <branch-name>`**  
  Deletes a branch.

---

### **Working with Remote Repositories**
- **`git remote add origin <repository-url>`**  
  Links the local repository to a remote one.

- **`git remote -v`**  
  Lists the remote repositories linked.

- **`git push origin <branch-name>`**  
  Pushes the committed changes to the remote repository.

- **`git pull origin <branch-name>`**  
  Fetches and merges changes from the remote repository.

---

### **Viewing History and Logs**
- **`git log`**  
  Displays the commit history.

- **`git log --oneline`**  
  Shows a compact version of the commit history.

- **`git diff`**  
  Shows the differences between the working directory and the last commit.

- **`git diff --staged`**  
  Shows the differences between the staged changes and the last commit.

---

### **Undoing Changes**
- **`git reset <file>`**  
  Removes a file from the staging area (keeps changes in working directory).

- **`git reset --hard`**  
  Resets the working directory and staging area to the last commit (all changes lost).

- **`git revert <commit-hash>`**  
  Creates a new commit to undo the specified commit.

---

### **Tagging**
- **`git tag <tag-name>`**  
  Creates a tag for a specific commit.

- **`git tag -a <tag-name> -m "message"`**  
  Creates an annotated tag with a message.

---

These commands cover the basics needed to work with Git effectively! Let me know if you need more advanced topics or deeper explanations.